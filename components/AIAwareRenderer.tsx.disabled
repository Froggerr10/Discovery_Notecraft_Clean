// components/AIAwareRenderer.tsx
// Componente que gera insights IA em tempo real durante o preenchimento
import React, { useEffect, useState } from 'react';
import { AIInsightGenerator, AIInsight } from '@/lib/ai-prompts';
import { CRITICAL_SECTIONS_PROMPTS, ExecutiveReportGenerator } from '@/lib/critical-sections-prompts';
import WebResearchEngine from '@/lib/web-research-engine';

interface AIAwareRendererProps {
  questionId: number;
  sectionId: number;
  response: any;
  observations?: string;
  onInsightGenerated?: (insight: AIInsight) => void;
}

export const AIAwareRenderer: React.FC<AIAwareRendererProps> = ({
  questionId,
  sectionId,
  response,
  observations,
  onInsightGenerated
}) => {
  const [insight, setInsight] = useState<AIInsight | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [validatedInsight, setValidatedInsight] = useState<any>(null);

  useEffect(() => {
    if (response && response !== '') {
      generateAdvancedInsight();
    }
  }, [response, observations]);

  const generateAdvancedInsight = async () => {
    if (isGenerating) return;
    
    setIsGenerating(true);
    
    try {
      // Gera insight baseado em se√ß√£o cr√≠tica
      if ([1, 3, 16, 5, 8].includes(sectionId)) {
        const advancedInsight = await generateCriticalSectionInsight();
        setValidatedInsight(advancedInsight);
      }
      
      // Gera insight tradicional + valida√ß√£o web
      const webValidatedInsight = await WebResearchEngine.generateFactCheckedInsight(
        response,
        observations || '',
        getResearchTopic(sectionId)
      );
      
      const generatedInsight = AIInsightGenerator.generateQuestionInsight(
        questionId,
        sectionId,
        response,
        observations
      );
      
      // Enriquece insight com valida√ß√£o web
      const enrichedInsight = {
        ...generatedInsight,
        web_validation: webValidatedInsight,
        sources_count: webValidatedInsight.sources_cited.length,
        confidence_level: webValidatedInsight.confidence_level
      };
      
      setInsight(enrichedInsight);
      onInsightGenerated?.(enrichedInsight);
      
      // Salva insights avan√ßados
      const existingInsights = JSON.parse(localStorage.getItem('ai_insights_advanced') || '[]');
      existingInsights.push({
        ...enrichedInsight,
        critical_analysis: validatedInsight,
        timestamp: new Date().toISOString()
      });
      localStorage.setItem('ai_insights_advanced', JSON.stringify(existingInsights));
      
    } catch (error) {
      console.error('Erro ao gerar insight avan√ßado:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateCriticalSectionInsight = async () => {
    const responses = [response];
    const observationsArray = [observations || ''];
    
    switch (sectionId) {
      case 1:
        return await simulatePromptExecution(
          CRITICAL_SECTIONS_PROMPTS.section_1_service_portfolio(responses, observationsArray)
        );
      case 3:
        return await simulatePromptExecution(
          CRITICAL_SECTIONS_PROMPTS.section_3_ai_automation(responses, observationsArray)
        );
      case 16:
        return await simulatePromptExecution(
          CRITICAL_SECTIONS_PROMPTS.section_16_sales_agents(responses, observationsArray)
        );
      case 5:
        return await simulatePromptExecution(
          CRITICAL_SECTIONS_PROMPTS.section_5_commercial_future(responses, observationsArray)
        );
      case 8:
        return await simulatePromptExecution(
          CRITICAL_SECTIONS_PROMPTS.section_8_performance(responses, observationsArray)
        );
      default:
        return null;
    }
  };

  const simulatePromptExecution = async (prompt: string): Promise<any> => {
    // Simula execu√ß√£o do prompt (em produ√ß√£o, usaria LLM real)
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      analysis_type: `Se√ß√£o ${sectionId} - An√°lise Avan√ßada`,
      prompt_used: prompt.substring(0, 100) + '...',
      confidence: 'HIGH',
      methodology: 'Framework consultoria l√≠der',
      key_findings: [
        'An√°lise baseada em metodologias comprovadas',
        'Benchmarks de mercado validados',
        'Recomenda√ß√µes espec√≠ficas para o contexto'
      ]
    };
  };

  const getResearchTopic = (sectionId: number): string => {
    const topics: { [key: number]: string } = {
      1: 'concentracao_servicos_risco',
      3: 'rpa_roi_tributario', 
      5: 'crescimento_consultoria_digital',
      8: 'kpis_revenue_operations',
      16: 'automacao_comercial_b2b'
    };
    return topics[sectionId] || 'consultoria_tributaria_benchmarks';
  };

  // Campo oculto - n√£o exibe nada visualmente
  return (
    <div className="hidden">
      {/* Dados ocultos para an√°lise posterior */}
      <input 
        type="hidden" 
        value={JSON.stringify(insight)} 
        data-ai-insight={questionId}
      />
      
      {/* Para debug - remove em produ√ß√£o */}
      {process.env.NODE_ENV === 'development' && insight && (
        <div className="mt-2 p-2 bg-purple-900/20 border border-purple-500/30 rounded-lg text-xs">
          <div className="text-purple-400 font-medium">ü§ñ IA Insight (DEV)</div>
          <div className="text-purple-300">
            Complexidade: {insight.ai_analysis.complexity_score}/10 | 
            Import√¢ncia: {insight.ai_analysis.strategic_importance}/10 | 
            Automa√ß√£o: {insight.ai_analysis.automation_potential}/10
          </div>
          {insight.ai_analysis.insights.length > 0 && (
            <div className="text-purple-200 mt-1">
              üí° {insight.ai_analysis.insights[0]}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AIAwareRenderer;